---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-mesh-config
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: service-mesh
data:
  service-mesh.yaml: |
    serviceMesh:
      enabled: true
      namespace: dept-barc
      services:
        - name: sample-service
          port: 3001
          replicas: 3
          enableMutualTLS: true
          enableTracing: true
          loadBalancing:
            algorithm: least_connections
            healthCheckInterval: 30000
        - name: ai-service
          port: 3002
          replicas: 2
          enableMutualTLS: true
          enableTracing: true
          loadBalancing:
            algorithm: round_robin
            healthCheckInterval: 30000
        - name: audit-service
          port: 3003
          replicas: 2
          enableMutualTLS: true
          enableTracing: true
          loadBalancing:
            algorithm: least_connections
            healthCheckInterval: 30000
        - name: backup-service
          port: 3004
          replicas: 1
          enableMutualTLS: false
          enableTracing: true
          loadBalancing:
            algorithm: round_robin
            healthCheckInterval: 60000
        - name: config-service
          port: 3005
          replicas: 2
          enableMutualTLS: true
          enableTracing: true
          loadBalancing:
            algorithm: least_connections
            healthCheckInterval: 30000
      
      mutualTLS:
        enabled: true
        enforceClientCerts: true
        certificateValidityDays: 90
        keySize: 2048
        cipherSuites:
          - TLS_AES_256_GCM_SHA384
          - TLS_CHACHA20_POLY1305_SHA256
          - TLS_AES_128_GCM_SHA256
        protocols:
          - TLSv1.2
          - TLSv1.3
        verifyPeerCertificate: true
        requireSAN: false
      
      trafficManagement:
        rateLimiting:
          enabled: true
          requestsPerSecond: 1000
          burstSize: 100
          keyExtractor: source_service
        faultInjection:
          enabled: false
        canaryDeployment:
          autoPromote: false
          autoRollback: true
          successCriteria:
            errorRate: 0.01
            responseTime: 500
            duration: 300000
      
      monitoring:
        enabled: true
        metricsPort: 9090
        tracingPort: 14268
        healthCheckPath: /health
        metricsPath: /metrics
        samplingRate: 0.1
        exportInterval: 60000

---
apiVersion: v1
kind: Secret
metadata:
  name: service-mesh-tls-certs
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: service-mesh
type: Opaque
data:
  # Root CA certificate (base64 encoded)
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNVVENDQWJpZ0F3SUJBZ0lKQUxVUmJOY3NuOVhKTUEwR0NTcUdTSWIzRFFFQkN3VUFNRDh4Q3pBSkJnTlYKQkFZVEFsVlRNUkF3RGdZRFZRUUlEQWRPYjNKMGFDQkRNUkF3RGdZRFZRUUhEQWRTWVd4bGFXZG9NUXd3Q2dZRApWUVFLREFOT1FVRTBIQW9HQTFVRUNnd0RUa0ZCTkJvR0ExVUVBd3dUVG1GdWIzQnZjbVVnVFdWemFFTkJNQjRYCkRUSXlNRGd4TnpFMU5EY3pNVm9YRFRNeU1EZ3hOREUxTkRjek1Wb3dQekVMTUFrR0ExVUVCaE1DVlZNeEVEQU8KQmdOVkJBZ01CMDVoYzJoRGFXeGxNUkF3RGdZRFZRUUhEQWRTWVd4bGFXZG9NUXd3Q2dZRFZRUUtEQU5PUVVFMAPBZ05WQkFNTUUwNWhibTl3YjNKbElFMWxjMmhEUVRDQm56QU5CZ2txaGtpRzl3MEJBUUVGQUFPQmpRQXdnWWtDCmdZRUF6SUNQaWNnKzBNWnNGWnlHZU5aOGZQZXZaKzFtRndoSWxjWkwrRkJsNVFiMnFZcGhOZ0tqZlE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  
  # Root CA private key (base64 encoded)
  ca.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRE1nSSs4eUQ3UXhteQpWbklaNDFueDg5NjluN1dZWENFaVZ4a3Y0VUdYbEJ2YXBpbUUyQXFOOUE9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-mesh-proxy
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: service-mesh-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nanopore-tracking
      component: service-mesh-proxy
  template:
    metadata:
      labels:
        app: nanopore-tracking
        component: service-mesh-proxy
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: nanopore-tracking-sa
      containers:
      - name: service-mesh-proxy
        image: image-registry.openshift-image-registry.svc:5000/dept-barc/nanopore-tracking-app:latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        - containerPort: 14268
          name: tracing
        env:
        - name: NODE_ENV
          value: "production"
        - name: SERVICE_MESH_ENABLED
          value: "true"
        - name: SERVICE_MESH_NAMESPACE
          value: "dept-barc"
        - name: MUTUAL_TLS_ENABLED
          value: "true"
        - name: TRACING_ENABLED
          value: "true"
        - name: METRICS_PORT
          value: "9090"
        - name: TRACING_PORT
          value: "14268"
        - name: LOG_LEVEL
          value: "info"
        volumeMounts:
        - name: service-mesh-config
          mountPath: /app/config/service-mesh
          readOnly: true
        - name: tls-certs
          mountPath: /app/certs
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
      volumes:
      - name: service-mesh-config
        configMap:
          name: service-mesh-config
      - name: tls-certs
        secret:
          secretName: service-mesh-tls-certs

---
apiVersion: v1
kind: Service
metadata:
  name: service-mesh-proxy
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: service-mesh-proxy
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: nanopore-tracking
    component: service-mesh-proxy
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: tracing
    port: 14268
    targetPort: 14268
    protocol: TCP
  type: ClusterIP

---
apiVersion: v1
kind: ServiceMonitor
metadata:
  name: service-mesh-proxy-monitor
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: service-mesh-proxy
spec:
  selector:
    matchLabels:
      app: nanopore-tracking
      component: service-mesh-proxy
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
    honorLabels: true
  namespaceSelector:
    matchNames:
    - dept-barc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-collector
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: jaeger-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nanopore-tracking
      component: jaeger-collector
  template:
    metadata:
      labels:
        app: nanopore-tracking
        component: jaeger-collector
    spec:
      containers:
      - name: jaeger-collector
        image: jaegertracing/jaeger-collector:1.42
        ports:
        - containerPort: 14268
          name: http
        - containerPort: 14250
          name: grpc
        env:
        - name: SPAN_STORAGE_TYPE
          value: "memory"
        - name: COLLECTOR_ZIPKIN_HOST_PORT
          value: ":9411"
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 14268
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 14268
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-collector
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: jaeger-collector
spec:
  selector:
    app: nanopore-tracking
    component: jaeger-collector
  ports:
  - name: http
    port: 14268
    targetPort: 14268
    protocol: TCP
  - name: grpc
    port: 14250
    targetPort: 14250
    protocol: TCP
  - name: zipkin
    port: 9411
    targetPort: 9411
    protocol: TCP
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-query
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: jaeger-query
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nanopore-tracking
      component: jaeger-query
  template:
    metadata:
      labels:
        app: nanopore-tracking
        component: jaeger-query
    spec:
      containers:
      - name: jaeger-query
        image: jaegertracing/jaeger-query:1.42
        ports:
        - containerPort: 16686
          name: http
        env:
        - name: SPAN_STORAGE_TYPE
          value: "memory"
        - name: JAEGER_AGENT_HOST
          value: "jaeger-collector"
        - name: JAEGER_AGENT_PORT
          value: "14268"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 16686
          initialDelaySeconds: 5
          periodSeconds: 5

---
apiVersion: v1
kind: Service
metadata:
  name: jaeger-query
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: jaeger-query
spec:
  selector:
    app: nanopore-tracking
    component: jaeger-query
  ports:
  - name: http
    port: 16686
    targetPort: 16686
    protocol: TCP
  type: ClusterIP

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: jaeger-ui-route
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: jaeger-query
spec:
  to:
    kind: Service
    name: jaeger-query
  port:
    targetPort: http
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-mesh-dashboard
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: grafana-dashboard
data:
  service-mesh-dashboard.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Nanopore Service Mesh Dashboard",
        "tags": ["service-mesh", "microservices"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(service_mesh_requests_total[5m])",
                "legendFormat": "{{service}} - {{method}}"
              }
            ],
            "yAxes": [
              {
                "label": "Requests/sec",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 0
            }
          },
          {
            "id": 2,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(service_mesh_requests_total{status=~\"5..\"}[5m])",
                "legendFormat": "{{service}} - Errors"
              }
            ],
            "yAxes": [
              {
                "label": "Errors/sec",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 0
            }
          },
          {
            "id": 3,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(service_mesh_request_duration_seconds_bucket[5m])) * 1000",
                "legendFormat": "{{service}} - P95"
              },
              {
                "expr": "histogram_quantile(0.50, rate(service_mesh_request_duration_seconds_bucket[5m])) * 1000",
                "legendFormat": "{{service}} - P50"
              }
            ],
            "yAxes": [
              {
                "label": "Milliseconds",
                "min": 0
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 0,
              "y": 8
            }
          },
          {
            "id": 4,
            "title": "Circuit Breaker Status",
            "type": "stat",
            "targets": [
              {
                "expr": "service_mesh_circuit_breaker_open",
                "legendFormat": "{{service}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 12,
              "x": 12,
              "y": 8
            }
          },
          {
            "id": 5,
            "title": "TLS Certificate Status",
            "type": "table",
            "targets": [
              {
                "expr": "service_mesh_certificate_expiry_days",
                "legendFormat": "{{service}} - {{cert_type}}"
              }
            ],
            "gridPos": {
              "h": 8,
              "w": 24,
              "x": 0,
              "y": 16
            }
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }

---
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: service-mesh-alerts
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: service-mesh
spec:
  groups:
  - name: service-mesh
    rules:
    - alert: ServiceMeshHighErrorRate
      expr: rate(service_mesh_requests_total{status=~"5.."}[5m]) > 0.1
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High error rate detected in service mesh"
        description: "Service {{ $labels.service }} has error rate of {{ $value }} requests/sec"
    
    - alert: ServiceMeshHighLatency
      expr: histogram_quantile(0.95, rate(service_mesh_request_duration_seconds_bucket[5m])) > 1.0
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High latency detected in service mesh"
        description: "Service {{ $labels.service }} has P95 latency of {{ $value }}s"
    
    - alert: ServiceMeshCircuitBreakerOpen
      expr: service_mesh_circuit_breaker_open == 1
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Circuit breaker is open"
        description: "Circuit breaker for service {{ $labels.service }} is open"
    
    - alert: ServiceMeshCertificateExpiring
      expr: service_mesh_certificate_expiry_days < 7
      for: 1m
      labels:
        severity: warning
      annotations:
        summary: "TLS certificate expiring soon"
        description: "Certificate for service {{ $labels.service }} expires in {{ $value }} days"
    
    - alert: ServiceMeshCertificateExpired
      expr: service_mesh_certificate_expiry_days < 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "TLS certificate expired"
        description: "Certificate for service {{ $labels.service }} has expired"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: service-mesh-envoy-config
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: envoy-proxy
data:
  envoy.yaml: |
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
    
    static_resources:
      listeners:
      - name: listener_0
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8080
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              access_log:
              - name: envoy.access_loggers.stdout
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.access_loggers.stream.v3.StdoutAccessLog
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
              route_config:
                name: local_route
                virtual_hosts:
                - name: local_service
                  domains: ["*"]
                  routes:
                  - match:
                      prefix: "/sample"
                    route:
                      cluster: sample_service
                  - match:
                      prefix: "/ai"
                    route:
                      cluster: ai_service
                  - match:
                      prefix: "/audit"
                    route:
                      cluster: audit_service
                  - match:
                      prefix: "/backup"
                    route:
                      cluster: backup_service
                  - match:
                      prefix: "/config"
                    route:
                      cluster: config_service
      
      clusters:
      - name: sample_service
        type: STRICT_DNS
        lb_policy: LEAST_REQUEST
        load_assignment:
          cluster_name: sample_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: sample-service.dept-barc.svc.cluster.local
                    port_value: 80
        health_checks:
        - timeout: 1s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: /health
      
      - name: ai_service
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: ai_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: ai-service.dept-barc.svc.cluster.local
                    port_value: 80
        health_checks:
        - timeout: 1s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: /health
      
      - name: audit_service
        type: STRICT_DNS
        lb_policy: LEAST_REQUEST
        load_assignment:
          cluster_name: audit_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: audit-service.dept-barc.svc.cluster.local
                    port_value: 80
        health_checks:
        - timeout: 1s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: /health
      
      - name: backup_service
        type: STRICT_DNS
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: backup_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: backup-service.dept-barc.svc.cluster.local
                    port_value: 80
        health_checks:
        - timeout: 1s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: /health
      
      - name: config_service
        type: STRICT_DNS
        lb_policy: LEAST_REQUEST
        load_assignment:
          cluster_name: config_service
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: config-service.dept-barc.svc.cluster.local
                    port_value: 80
        health_checks:
        - timeout: 1s
          interval: 10s
          unhealthy_threshold: 3
          healthy_threshold: 2
          http_health_check:
            path: /health

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: envoy-proxy
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: envoy-proxy
spec:
  selector:
    matchLabels:
      app: nanopore-tracking
      component: envoy-proxy
  template:
    metadata:
      labels:
        app: nanopore-tracking
        component: envoy-proxy
    spec:
      containers:
      - name: envoy
        image: envoyproxy/envoy:v1.24-latest
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9901
          name: admin
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
          readOnly: true
        command:
        - /usr/local/bin/envoy
        - -c
        - /etc/envoy/envoy.yaml
        - --service-cluster
        - nanopore-service-mesh
        - --service-node
        - envoy-proxy
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /ready
            port: 9901
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 9901
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: envoy-config
        configMap:
          name: service-mesh-envoy-config

---
apiVersion: v1
kind: Service
metadata:
  name: envoy-proxy
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: envoy-proxy
spec:
  selector:
    app: nanopore-tracking
    component: envoy-proxy
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: admin
    port: 9901
    targetPort: 9901
    protocol: TCP
  type: ClusterIP

---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: service-mesh-route
  namespace: dept-barc
  labels:
    app: nanopore-tracking
    component: service-mesh
spec:
  to:
    kind: Service
    name: envoy-proxy
  port:
    targetPort: http
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect 