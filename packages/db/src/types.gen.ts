/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserStatus = "active" | "disabled" | "invited";

export interface Account {
  /**
   * The access token of the account. Returned by the provider
   */
  accessToken: string | null;
  /**
   * The time when the access token expires
   */
  accessTokenExpiresAt: Timestamp | null;
  /**
   * The id of the account as provided by the SSO or equal to user_id for credential accounts
   */
  accountId: string;
  /**
   * The time when the account was created
   */
  createdAt: Generated<Timestamp | null>;
  /**
   * Unique identifier for each account
   */
  id: Generated<string>;
  /**
   * The id token returned from the provider
   */
  idToken: string | null;
  /**
   * The password of the account. Mainly used for email and password authentication
   */
  password: string | null;
  /**
   * The id of the provider
   */
  providerId: string;
  /**
   * The refresh token of the account. Returned by the provider
   */
  refreshToken: string | null;
  /**
   * The time when the refresh token expires
   */
  refreshTokenExpiresAt: Timestamp | null;
  /**
   * The scope of the account. Returned by the provider
   */
  scope: string | null;
  /**
   * The time when the account was last updated
   */
  updatedAt: Generated<Timestamp | null>;
  /**
   * The id of the user
   */
  userId: string;
}

export interface AnalysisResult {
  algorithmUsed: string | null;
  analysisType: string;
  completedAt: Timestamp | null;
  computationTimeMs: number | null;
  createdAt: Generated<Timestamp>;
  errorMessage: string | null;
  experimentId: string;
  id: Generated<string>;
  parameters: Json | null;
  resultsData: Json | null;
  status: Generated<string | null>;
}

export interface Credential {
  /**
   * The time when the credential was created
   */
  createdAt: Generated<Timestamp | null>;
  /**
   * The email associated with this credential
   */
  email: string | null;
  /**
   * Unique identifier for each credential
   */
  id: Generated<string>;
  /**
   * A user-friendly label for this credential
   */
  label: string | null;
  /**
   * Whether this is the primary credential for the user
   */
  primary: boolean | null;
  /**
   * The authentication provider name
   */
  provider: string;
  /**
   * The account id from the provider
   */
  providerAccountId: string | null;
  /**
   * JSON object containing provider tokens
   */
  tokens: Json;
  /**
   * The time when the credential was last updated
   */
  updatedAt: Generated<Timestamp | null>;
  /**
   * The id of the user who owns this credential
   */
  userId: string;
}

export interface Experiment {
  createdAt: Generated<Timestamp>;
  createdBy: string;
  description: string | null;
  experimentType: Generated<string | null>;
  id: Generated<string>;
  name: string;
  status: Generated<string | null>;
  targetOrganism: string | null;
  updatedAt: Generated<Timestamp>;
}

export interface GuideRna {
  algorithmUsed: string | null;
  algorithmVersion: string | null;
  createdAt: Generated<Timestamp>;
  efficiencyScore: Numeric | null;
  gcContent: Numeric | null;
  guideSequence: string;
  id: Generated<string>;
  onTargetScore: Numeric | null;
  pamSequence: string;
  sequenceId: string;
  specificityScore: Numeric | null;
  strand: string;
  targetPosition: number;
}

export interface NanoporeAttachment {
  createdAt: Generated<Timestamp>;
  description: string | null;
  fileName: string;
  filePath: string | null;
  fileSizeBytes: Int8 | null;
  fileType: string | null;
  id: Generated<string>;
  sampleId: string;
  uploadedAt: Generated<Timestamp>;
  uploadedBy: string | null;
}

export interface NanoporeProcessingStep {
  assignedTo: string | null;
  completedAt: Timestamp | null;
  createdAt: Generated<Timestamp>;
  estimatedDurationHours: number | null;
  id: Generated<string>;
  notes: string | null;
  /**
   * Flexible JSONB storage for step-specific results and metrics
   */
  resultsData: Json | null;
  sampleId: string;
  startedAt: Timestamp | null;
  stepName: string;
  stepStatus: Generated<string | null>;
  updatedAt: Generated<Timestamp>;
}

export interface NanoporeSampleDetail {
  /**
   * Whether bioinformatics analysis is requested
   */
  analysisRequired: Generated<boolean | null>;
  analysisType: string | null;
  barcodeKit: string | null;
  barcodingRequired: Generated<boolean | null>;
  basecallingModel: string | null;
  createdAt: Generated<Timestamp>;
  dataDeliveryMethod: string | null;
  expectedReadLength: string | null;
  fileFormat: string | null;
  genomeSize: string | null;
  id: Generated<string>;
  internalNotes: string | null;
  libraryPrepKit: string | null;
  organism: string | null;
  qcNotes: string | null;
  qcPassed: boolean | null;
  runTimeHours: number | null;
  sampleId: string;
  specialInstructions: string | null;
  updatedAt: Generated<Timestamp>;
}

export interface NanoporeSample {
  /**
   * Staff member currently responsible for the sample
   */
  assignedTo: string | null;
  /**
   * Chart field identifier required for intake validation
   */
  chartField: string;
  completedAt: Timestamp | null;
  concentration: Numeric | null;
  createdAt: Generated<Timestamp>;
  createdBy: string;
  flowCellCount: Generated<number | null>;
  flowCellType: string | null;
  id: Generated<string>;
  labName: string | null;
  libraryPrepBy: string | null;
  /**
   * Processing priority level
   */
  priority: Generated<string | null>;
  projectId: string | null;
  sampleBuffer: string | null;
  sampleName: string;
  sampleType: string;
  startedAt: Timestamp | null;
  /**
   * Current processing status of the sample
   */
  status: Generated<string | null>;
  submittedAt: Generated<Timestamp>;
  submitterEmail: string;
  submitterName: string;
  totalAmount: Numeric | null;
  updatedAt: Generated<Timestamp>;
  volume: Numeric | null;
}

export interface OffTargetSite {
  annotation: string | null;
  bindingScore: Numeric | null;
  chromosome: string | null;
  createdAt: Generated<Timestamp>;
  cuttingScore: Numeric | null;
  guideRnaId: string;
  id: Generated<string>;
  mismatchCount: Generated<number>;
  mismatchPositions: number[] | null;
  position: Int8 | null;
  sequence: string;
  strand: string | null;
}

export interface Sequence {
  chromosome: string | null;
  createdAt: Generated<Timestamp>;
  endPosition: Int8 | null;
  experimentId: string;
  id: Generated<string>;
  name: string;
  organism: string | null;
  sequence: string;
  sequenceType: Generated<string | null>;
  startPosition: Int8 | null;
  strand: string | null;
}

export interface Session {
  /**
   * The time when the session was created
   */
  createdAt: Generated<Timestamp | null>;
  /**
   * The time when the session expires
   */
  expiresAt: Timestamp;
  /**
   * Unique identifier for each session
   */
  id: Generated<string>;
  /**
   * The IP address of the device
   */
  ipAddress: string | null;
  /**
   * The unique session token
   */
  token: string;
  /**
   * The time when the session was last updated
   */
  updatedAt: Generated<Timestamp | null>;
  /**
   * The user agent information of the device
   */
  userAgent: string | null;
  /**
   * The id of the user
   */
  userId: string;
}

export interface User {
  /**
   * The time when the user was created
   */
  createdAt: Generated<Timestamp | null>;
  /**
   * The email address of the user
   */
  email: string | null;
  /**
   * Whether the user email is verified
   */
  emailVerified: Generated<boolean>;
  /**
   * Unique identifier for each user
   */
  id: Generated<string>;
  /**
   * The image URL of the user
   */
  image: string | null;
  /**
   * The time when the user last interacted with the system
   */
  lastInteractionAt: Timestamp | null;
  /**
   * The display name of the user
   */
  name: string | null;
  /**
   * The current status of the user account
   */
  status: Generated<UserStatus>;
  /**
   * The user preferred timezone
   */
  timeZone: string | null;
  /**
   * The time when the user was last updated
   */
  updatedAt: Generated<Timestamp | null>;
}

export interface Verification {
  /**
   * The time when the verification was created
   */
  createdAt: Generated<Timestamp | null>;
  /**
   * The time when the verification request expires
   */
  expiresAt: Timestamp;
  /**
   * Unique identifier for each verification
   */
  id: Generated<string>;
  /**
   * The identifier for the verification request
   */
  identifier: string;
  /**
   * The time when the verification was last updated
   */
  updatedAt: Generated<Timestamp | null>;
  /**
   * The value to be verified
   */
  value: string;
}

export interface DB {
  accounts: Account;
  analysisResults: AnalysisResult;
  credentials: Credential;
  experiments: Experiment;
  guideRnas: GuideRna;
  nanoporeAttachments: NanoporeAttachment;
  nanoporeProcessingSteps: NanoporeProcessingStep;
  nanoporeSampleDetails: NanoporeSampleDetail;
  nanoporeSamples: NanoporeSample;
  offTargetSites: OffTargetSite;
  sequences: Sequence;
  sessions: Session;
  users: User;
  verifications: Verification;
}
